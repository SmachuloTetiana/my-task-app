{"version":3,"sources":["components/Header/Header.js","components/Header/index.js","store/actions/index.js","store/constants/actionTypes.js","components/TaskItem/TaskItem.js","components/TaskList/TaskList.js","containers/Home/Home.js","containers/Home/index.js","containers/Register/Register.js","containers/Register/index.js","containers/Login/Login.js","containers/Login/index.js","App.js","serviceWorker.js","store/reducers/authReducer.js","store/reducers/index.js","index.js"],"names":["Header","props","className","currentUser","Fragment","activeClassName","exact","to","type","onClick","event","preventDefault","logOutUser","connect","state","auth","dispatch","TaskItem","newTaskText","shareUserEmail","useState","isEditing","setIsEditing","isSharing","setIsSharing","style","defaultValue","text","onChange","target","value","id","newTask","saveEditTask","sharedWith","includes","currentUserId","ownerEmail","disabled","deleteTask","name","placeholder","shareTask","shareUserHandler","TaskList","syncCurrentUser","deleteTaskHandler","saveEditTaskHandler","tasks","map","item","index","key","Home","task","setTask","onSubmit","addTask","required","payload","Register","email","password","user","setUser","handleChangeInput","setRegisterUser","history","push","htmlFor","users","Login","error","setError","success","setSuccess","forEach","obj","setCurrentUser","App","path","component","Boolean","window","location","hostname","match","initialState","JSON","parse","localStorage","getItem","allReducer","combineReducers","updatedCurrentState","updatedState","action","uniqid","setItem","stringify","filter","userId","owner","find","managerDB","userToSync","splice","shareWith","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.110d3fac.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Header = props => {\r\n    const handleLogOut = event => {\r\n        event.preventDefault();\r\n        props.logOutUser();\r\n    };\r\n\r\n    return (\r\n        <header className=\"Header\">\r\n            <nav className=\"navbar navbar-expand-sm bg-dark navbar-dark\">\r\n                <ul className=\"navbar-nav\">\r\n                    {\r\n                        props.currentUser ? (\r\n                            <React.Fragment>\r\n                                <li className=\"nav-item\">\r\n                                    <NavLink \r\n                                        activeClassName=\"active\" \r\n                                        className=\"nav-link\" \r\n                                        exact\r\n                                         to='/'>\r\n                                            Home\r\n                                        </NavLink>\r\n                                </li>\r\n\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"btn btn-primary ml-auto\"\r\n                                    onClick={handleLogOut}>\r\n                                    Log Out\r\n                                </button>\r\n                            </React.Fragment>\r\n                            ) : (\r\n                            <React.Fragment>\r\n                                <li className=\"nav-item\">\r\n                                    <NavLink \r\n                                        activeClassName=\"active\" \r\n                                        className=\"nav-link\" \r\n                                        to='/register'>\r\n                                            Register\r\n                                    </NavLink>\r\n                                </li>\r\n                                <li className=\"nav-item\">\r\n                                    <NavLink \r\n                                        activeClassName=\"active\" \r\n                                        className=\"nav-link\" \r\n                                        to='/login'>\r\n                                            Login\r\n                                    </NavLink>\r\n                                </li>\r\n                            </React.Fragment>\r\n                        )\r\n                    }\r\n                </ul>\r\n            </nav>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import { connect } from 'react-redux';\r\nimport { logOutUser } from '../../store/actions';\r\nimport Header from './Header';\r\n\r\nconst mapStateToProps = state => ({\r\n    currentUser: state.auth.currentUser\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    logOutUser: () => dispatch(logOutUser())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","import * as fromActions from \"../constants/actionTypes\";\r\n\r\nexport const setRegisterUser = person => ({\r\n    type: fromActions.REGISTER,\r\n    value: person\r\n})\r\n\r\nexport const setCurrentUser = person => ({\r\n    type: fromActions.LOGIN,\r\n    value: person\r\n})\r\n\r\nexport const logOutUser = () => ({\r\n    type: fromActions.LOG_OUT\r\n})\r\n\r\nexport const syncCurrentUser = id => ({\r\n    type: fromActions.SYNC_CURRENT_USER,\r\n    value: id\r\n})\r\n\r\nexport const addTask = text => ({\r\n    type: fromActions.ADD_TASK,\r\n    payload: text\r\n})\r\n\r\nexport const deleteTask = id => ({\r\n    type: fromActions.DELETE_TASK,\r\n    id\r\n})\r\n\r\nexport const saveEditTask = (id, newTask) => ({\r\n    type: fromActions.SAVE_EDIT_TASK,\r\n    id,\r\n    newTask\r\n})\r\n\r\nexport const shareTask = (id, shareUserEmail) => ({\r\n    type: fromActions.SHARE_TASK,\r\n    id,\r\n    shareUserEmail\r\n})","export const REGISTER = 'REGISTER';\r\nexport const LOGIN = 'LOGIN';\r\nexport const LOG_OUT = 'LOG_OUT';\r\nexport const ADD_TASK = 'ADD_TASK';\r\nexport const DELETE_TASK = 'DELETE_TASK';\r\nexport const SAVE_EDIT_TASK = 'SAVE_EDIT_TASK';\r\nexport const SYNC_CURRENT_USER = 'SYNC_CURRENT_USER';\r\nexport const SHARE_TASK = 'SHARE_TASK';","import React, { useState } from 'react';\r\n\r\nconst TaskItem = props => {\r\n    let newTaskText, shareUserEmail;\r\n\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const [isSharing, setIsSharing] = useState(false);\r\n\r\n    const handleSaveEditTask = (id, newTask) => {\r\n        props.saveEditTask(id, newTask);\r\n        setIsEditing(!isEditing);\r\n    }\r\n\r\n    const editTaskHandler = () => setIsEditing(!isEditing);\r\n\r\n    const shareTaskHandler = () => setIsSharing(!isSharing);\r\n\r\n    const shareUserHandler = (id, shareUserEmail) => {\r\n        props.shareTask(id, shareUserEmail);\r\n        setIsSharing(!isSharing);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"task d-flex flex-row justify-content-between align-items-center\">\r\n                {\r\n                    isEditing ? (\r\n                        <React.Fragment>\r\n                            <form className=\"d-flex flex-row justify-content-between\" style={{ 'flex': 'auto' }}>\r\n                                <input className=\"form-control\" type=\"text\" defaultValue={props.text} onChange={event => newTaskText = event.target.value} />\r\n\r\n                                <button type=\"button\" className=\"btn btn-primary\" onClick={() => handleSaveEditTask(props.id, newTaskText)}>\r\n                                    Save\r\n                            </button>\r\n                            </form>\r\n                        </React.Fragment>\r\n                    ) : (\r\n                            <React.Fragment>\r\n                                <p>{props.text}</p>\r\n\r\n                                {\r\n                                    props.sharedWith.includes(props.currentUserId) ? (\r\n                                        <span className=\"shared-with\"><strong>Shared with me:</strong> {props.ownerEmail}</span>\r\n                                    ) : (\r\n                                            <React.Fragment>\r\n                                                <button type=\"button\" className=\"btn btn-primary ml-auto\" onClick={() => shareTaskHandler(props.id)}>\r\n                                                    Share the Task\r\n                                         </button>\r\n\r\n                                                <button\r\n                                                    type=\"button\"\r\n                                                    className=\"btn btn-dark\"\r\n                                                    disabled={isSharing}\r\n                                                    onClick={() => editTaskHandler(props.id)}>\r\n                                                    Edit\r\n                                         </button>\r\n\r\n                                                <button type=\"button\" className=\"btn btn-danger\" onClick={() => props.deleteTask(props.id)}>\r\n                                                    Delete\r\n                                         </button>\r\n                                            </React.Fragment>\r\n                                        )\r\n                                }\r\n                            </React.Fragment>\r\n                        )\r\n                }\r\n            </div>\r\n\r\n            {isSharing ? (\r\n                <form className=\"d-flex shared-form\">\r\n                    <input\r\n                        className=\"form-control\"\r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        placeholder=\"User email\"\r\n                        value={shareUserEmail}\r\n                        onChange={event => shareUserEmail = event.target.value} />\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-primary ml-3\"\r\n                        onClick={() => shareUserHandler(props.id, shareUserEmail)}>\r\n                        Share\r\n                </button>\r\n                </form>\r\n            ) : null}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default TaskItem;","import React from 'react';\r\nimport TaskItem from '../TaskItem/TaskItem';\r\n\r\nconst TaskList = ({ currentUser, deleteTask, saveEditTask, syncCurrentUser, shareTask }) => {\r\n    const deleteTaskHandler = id => {\r\n        deleteTask(id);\r\n        syncCurrentUser(currentUser.id);\r\n    }\r\n\r\n    const saveEditTaskHandler = (id, newTask) => {\r\n        saveEditTask(id, newTask);\r\n        syncCurrentUser(currentUser.id);\r\n    };\r\n\r\n    return (\r\n        <div className=\"tasks-list\">\r\n            {currentUser.tasks.map((item, index) => (\r\n                <TaskItem \r\n                    {...item} \r\n                    key={index} \r\n                    currentUserId={currentUser.id}\r\n                    deleteTask={deleteTaskHandler}\r\n                    saveEditTask={saveEditTaskHandler}\r\n                    shareTask={shareTask} />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TaskList;","import React, { useState } from 'react';\r\nimport  { Redirect } from 'react-router-dom';\r\nimport TaskList from '../../components/TaskList/TaskList';\r\n\r\nconst Home = props => {\r\n    const [task, setTask] = useState();\r\n\r\n    const handleAddTask = event => {\r\n        event.preventDefault();\r\n\r\n        props.addTask(task);\r\n\r\n        setTask('');\r\n    }\r\n\r\n    if (!props.currentUser) {\r\n        return <Redirect to='/login' />\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"task-wrapper\">\r\n                <h2 className=\"task-title\">To do</h2>\r\n\r\n                <TaskList {...props}/>\r\n\r\n                <form onSubmit={handleAddTask}>\r\n                    <div className=\"form-group\">\r\n                        <textarea\r\n                            required\r\n                            placeholder=\"Add your task name...\"\r\n                            name=\"name\"\r\n                            className=\"form-control\"\r\n                            value={task}\r\n                            onChange={event => setTask(event.target.value)}>\r\n                        </textarea>\r\n                    </div>\r\n                    \r\n                    <button type=\"submit\" className=\"btn btn-primary\">\r\n                        Add Task\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","import { connect } from \"react-redux\";\r\nimport { addTask, deleteTask, saveEditTask, syncCurrentUser, shareTask } from \"../../store/actions\";\r\nimport Home from \"./Home\";\r\n\r\nconst mapStateToProps = state => ({\r\n  currentUser: state.auth.currentUser\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addTask: task => dispatch(addTask(task)),\r\n  deleteTask: id => dispatch(deleteTask(id)),\r\n  saveEditTask: (id, newTask) => dispatch(saveEditTask(id, newTask)),\r\n  syncCurrentUser: id => dispatch(syncCurrentUser(id)),\r\n  shareTask: (id, shareUserEmail) => dispatch(shareTask(id, shareUserEmail))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import React, { useState } from 'react';\r\nimport  { Redirect } from 'react-router-dom';\r\n\r\nconst Register = props => {\r\n    const [user, setUser] = useState({\r\n        email: '',\r\n        password: ''\r\n    });\r\n\r\n    const handleChangeInput = event => {\r\n        event.preventDefault();\r\n        setUser({\r\n            ...user,\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    const handleRegister = event => {\r\n        event.preventDefault();\r\n\r\n        setUser({\r\n            email: user.email,\r\n            password: user.password\r\n        });\r\n\r\n        props.setRegisterUser(user);\r\n\r\n        props.history.push('/login');\r\n    }\r\n\r\n    if (props.currentUser) {\r\n        return <Redirect to='/' />\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <form onSubmit={handleRegister}>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"email\">Name</label>\r\n                    <input \r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        required\r\n                        value={user.email}\r\n                        onChange={handleChangeInput}\r\n                        className=\"form-control\"\r\n                        placeholder=\"E-mail\" />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"password\">Password</label>\r\n                    <input \r\n                        type=\"text\"\r\n                        name=\"password\"\r\n                        required\r\n                        value={user.password}\r\n                        onChange={handleChangeInput}\r\n                        className=\"form-control\"\r\n                        placeholder=\"Password\" />\r\n                </div>\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-primary\">\r\n                        Register\r\n                </button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register;","import { connect } from 'react-redux';\r\nimport { setRegisterUser } from '../../store/actions';\r\nimport Register from './Register';\r\n\r\nconst mapStateToProps = state => ({\r\n    users: state.auth.users,\r\n    currentUser: state.auth.currentUser\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setRegisterUser: user => dispatch(setRegisterUser(user))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);","import React, { useState } from 'react';\r\nimport  { Redirect } from 'react-router-dom';\r\n\r\nconst Login = props => {\r\n    const [user, setUser] = useState({\r\n        email: '',\r\n        password: ''\r\n    });\r\n\r\n    const [error, setError] = useState(null);\r\n    const [success, setSuccess] = useState(null);\r\n\r\n    const handleChangeInput = event => {\r\n        event.preventDefault();\r\n        setUser({\r\n            ...user,\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    const handleLogin = event => {\r\n        event.preventDefault();\r\n        \r\n        const { email, password } = user;\r\n\r\n        props.users.forEach(obj => {\r\n            if(email !== obj.email || password !== obj.password) {\r\n                setError('Your credentials are invalid!')\r\n            } else {\r\n                setError(null);\r\n                setSuccess('You are logged in.');\r\n\r\n                props.setCurrentUser(obj);\r\n                props.history.push('/');\r\n            }\r\n        })\r\n    }\r\n\r\n    if (props.currentUser) {\r\n        return <Redirect to='/' />\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            { \r\n                error ? \r\n                <React.Fragment>\r\n                    <div className=\"alert alert-danger\">\r\n                        {error}\r\n                    </div>\r\n                </React.Fragment> : \r\n                null \r\n            }\r\n\r\n\r\n            { \r\n                success ? \r\n                <React.Fragment>\r\n                    <div className=\"alert alert-success\">\r\n                        {success}\r\n                    </div>\r\n                </React.Fragment> : \r\n                null \r\n            }\r\n            <form onSubmit={handleLogin}>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"email\">Name</label>\r\n                    <input \r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        value={user.email}\r\n                        required\r\n                        onChange={handleChangeInput}\r\n                        className=\"form-control\"\r\n                        placeholder=\"E-mail\" />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"password\">Password</label>\r\n                    <input \r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        value={user.password}\r\n                        required\r\n                        onChange={handleChangeInput}\r\n                        className=\"form-control\"\r\n                        placeholder=\"Password\" />\r\n                </div>\r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-primary\">\r\n                        Login\r\n                </button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;","import { connect } from 'react-redux';\r\nimport { setCurrentUser } from '../../store/actions';\r\nimport Login from './Login';\r\n\r\nconst mapStateToProps = state => ({\r\n    users: state.auth.users,\r\n    currentUser: state.auth.currentUser\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setCurrentUser: user => dispatch(setCurrentUser(user))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport Header from './components/Header';\r\n\r\nimport Home from './containers/Home';\r\nimport Register from './containers/Register';\r\nimport Login from './containers/Login';\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Fragment>\r\n      <Header />\r\n      <Switch>\r\n        <Route path=\"/\" exact component={Home} />\r\n        <Route path=\"/register\" component={Register} />\r\n        <Route path=\"/login\" component={Login} />\r\n      </Switch>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as uniqid from 'uniqid';\r\n\r\nimport * as fromActionTypes from \"../constants/actionTypes\";\r\n\r\nconst managerDB = JSON.parse(localStorage.getItem('managerDB'));\r\nconst initialState = managerDB || {\r\n    currentUser: null,\r\n    users: [],\r\n    tasks: []\r\n};\r\n\r\nexport const authReducer = (state = initialState, action) => {\r\n    let updatedCurrentState, updatedState;\r\n\r\n    switch (action.type) {\r\n        case fromActionTypes.REGISTER:\r\n            const { value: user } = action;\r\n\r\n            user.id = uniqid('user-');\r\n\r\n            updatedState = {\r\n                ...state,\r\n                users: [\r\n                    ...state.users,\r\n                    user\r\n                ]\r\n            };\r\n\r\n            localStorage.setItem('managerDB', JSON.stringify(updatedState));\r\n\r\n            return updatedState;\r\n        case fromActionTypes.LOGIN:\r\n            const tasks = state.tasks\r\n                .filter(task => task.userId === action.value.id || task.sharedWith.includes(action.value.id))\r\n                .map(task => {\r\n                    if (task.sharedWith.includes(action.value.id)) {\r\n                        const owner = state.users.find(user => user.id === task.userId);\r\n\r\n                        task.ownerEmail = owner.email;\r\n                    }\r\n\r\n                    return task;\r\n                });\r\n            const currentUser = {\r\n                ...action.value,\r\n                tasks\r\n            };\r\n\r\n            updatedCurrentState = {\r\n                ...state,\r\n                currentUser\r\n            };\r\n\r\n            localStorage.setItem('managerDB', JSON.stringify(updatedCurrentState));\r\n\r\n            return updatedCurrentState;\r\n        case fromActionTypes.LOG_OUT:\r\n            updatedCurrentState = {\r\n                ...state,\r\n                currentUser: null\r\n            };\r\n\r\n            localStorage.setItem('managerDB', JSON.stringify(updatedCurrentState));\r\n\r\n            return updatedCurrentState;\r\n        case fromActionTypes.SYNC_CURRENT_USER:\r\n            const managerDB = JSON.parse(localStorage.getItem('managerDB'));\r\n            const userToSync = managerDB.users.find(user => user.id === action.value);\r\n\r\n            userToSync.tasks = managerDB.tasks.filter(task => task.userId === action.value || task.sharedWith.includes(action.value));\r\n\r\n            updatedCurrentState = {\r\n                ...state,\r\n                currentUser: userToSync\r\n            };\r\n\r\n            localStorage.setItem('managerDB', JSON.stringify(updatedCurrentState));\r\n\r\n            return updatedCurrentState;\r\n        case fromActionTypes.ADD_TASK:\r\n            const { payload: text } = action;\r\n            const task = {\r\n                text,\r\n                id: uniqid('task-'),\r\n                userId: state.currentUser.id,\r\n                sharedWith: []\r\n            };\r\n\r\n            updatedState = {\r\n                ...state,\r\n                tasks: [\r\n                    ...state.tasks,\r\n                    task\r\n                ],\r\n                currentUser: {\r\n                    ...state.currentUser,\r\n                    tasks: [\r\n                        ...state.currentUser.tasks,\r\n                        task\r\n                    ]\r\n                }\r\n            }\r\n\r\n            localStorage.setItem('managerDB', JSON.stringify(updatedState));\r\n\r\n            return updatedState;\r\n        case fromActionTypes.DELETE_TASK:\r\n            state.tasks.filter((task, key) => task.id === action.id ? state.tasks.splice(key, 1) : null);\r\n\r\n            updatedState = {\r\n                ...state,\r\n                tasks: [\r\n                    ...state.tasks\r\n                ]\r\n            }\r\n\r\n            localStorage.setItem('managerDB', JSON.stringify(updatedState));\r\n\r\n            return updatedState;\r\n        case fromActionTypes.SAVE_EDIT_TASK:\r\n            state.tasks.forEach(task => {\r\n                if (task.id === action.id && action.newTask) {\r\n                    task.text = action.newTask;\r\n                }\r\n            });\r\n\r\n            updatedState = {\r\n                ...state,\r\n                tasks: [\r\n                    ...state.tasks\r\n                ]\r\n            }\r\n\r\n            localStorage.setItem('managerDB', JSON.stringify(updatedState));\r\n\r\n            return updatedState;\r\n        case fromActionTypes.SHARE_TASK:\r\n            const shareWith = state.users.find(user => user.email === action.shareUserEmail);\r\n\r\n            if (shareWith) {\r\n                state.tasks.forEach(task => {\r\n                    if (task.id === action.id) {\r\n                        !task.sharedWith.includes(shareWith.id) && task.sharedWith.push(shareWith.id);\r\n                    }\r\n                });\r\n            }\r\n\r\n\r\n            updatedState = {\r\n                ...state,\r\n                tasks: [\r\n                    ...state.tasks\r\n                ]\r\n            };\r\n\r\n            localStorage.setItem('managerDB', JSON.stringify(updatedState));\r\n\r\n            return updatedState;\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport { authReducer } from \"./authReducer\";\r\n\r\nexport const allReducer = combineReducers({\r\n    auth: authReducer\r\n})","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nimport './index.css'\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore } from 'redux';\r\nimport { allReducer } from './store/reducers';\r\n\r\nconst store = createStore(\r\n    allReducer,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <Router basename=\"/my-task-app\">\r\n            <App />\r\n        </Router>\r\n    </Provider>, \r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}